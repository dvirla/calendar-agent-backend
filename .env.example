# Database Configuration
# For development, use SQLite: sqlite:///./app.db
# For production, use PostgreSQL: postgresql://user:password@host:port/database
DATABASE_URL=sqlite:///./app.db

# JWT Security
# Generate a strong secret key for JWT token signing
# You can use: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your-secret-key-change-this-in-production

# Google OAuth Configuration
# Get these from Google Cloud Console (https://console.cloud.google.com/)
# Enable Calendar API and create OAuth 2.0 Client IDs
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# Encryption Key for Credential Storage
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
ENCRYPTION_KEY=your-fernet-encryption-key

# Azure AI Configuration (for conversational AI)
# Get these from Azure OpenAI service
AZURE_AI_API_KEY=your-azure-ai-key
AZURE_AI_O4_ENDPOINT=your-azure-endpoint
AZURE_API_VERSION=2024-02-15-preview
AZURE_MODEL_NAME=gpt-4o

# Application URLs
# Frontend URL (used for redirects after authentication)
FRONTEND_URL=http://localhost:5173

# Authentication redirect URI (must match Google OAuth config)
AUTH_REDIRECT_URI=http://localhost:8000/auth/callback

# Model Configuration
# Temperature for AI model responses (0.0 = deterministic, 1.0 = creative)
MODEL_TEMPRATURE=0.0

# Observability (Optional)
# Get token from Logfire (https://logfire.pydantic.dev/)
LOGFIRE_TOKEN=your-logfire-token

# Email Configuration (Optional - for waiting list service)
EMAIL_PASSWORD=your-email-app-password